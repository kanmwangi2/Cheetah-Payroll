// Enhanced PDF generation service with professional formatting
import jsPDF from 'jspdf';
import 'jspdf-autotable';
import { 
  PayeReturnData, 
  PensionReportData, 
  MaternityReportData, 
  CBHIReportData, 
  RAMAReportData 
} from './reports.service';
import { StaffPayroll, Company } from '../../../shared/types';

// Extend jsPDF type to include autoTable
declare module 'jspdf' {
  interface jsPDF {
    autoTable: (options: any) => jsPDF;
  }
}

export class PDFReportGenerator {
  private doc: jsPDF;
  private company: Company;
  private pageWidth: number;
  private pageHeight: number;
  private margin: number = 20;

  constructor(company: Company) {
    this.doc = new jsPDF();
    this.company = company;
    this.pageWidth = this.doc.internal.pageSize.getWidth();
    this.pageHeight = this.doc.internal.pageSize.getHeight();
  }

  private addHeader(title: string, period?: string) {
    // Company logo placeholder
    this.doc.setFillColor(25, 118, 210);
    this.doc.rect(this.margin, this.margin, 15, 15, 'F');
    this.doc.setTextColor(255, 255, 255);
    this.doc.setFontSize(12);
    this.doc.setFont('helvetica', 'bold');
    this.doc.text('CP', this.margin + 7.5, this.margin + 9, { align: 'center' });

    // Company name and title
    this.doc.setTextColor(0, 0, 0);
    this.doc.setFontSize(16);
    this.doc.setFont('helvetica', 'bold');
    this.doc.text(this.company.name, this.margin + 20, this.margin + 8);

    this.doc.setFontSize(14);
    this.doc.text(title, this.margin + 20, this.margin + 16);

    if (period) {
      this.doc.setFontSize(12);
      this.doc.setFont('helvetica', 'normal');
      this.doc.text(`Period: ${period}`, this.margin + 20, this.margin + 24);
    }

    // Date and time
    this.doc.setFontSize(10);
    this.doc.text(`Generated: ${new Date().toLocaleString()}`, this.pageWidth - this.margin, this.margin + 8, { align: 'right' });

    return period ? this.margin + 35 : this.margin + 30;
  }

  private addFooter() {
    const pageCount = this.doc.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
      this.doc.setPage(i);
      this.doc.setFontSize(8);
      this.doc.setTextColor(128, 128, 128);
      this.doc.text(
        `Page ${i} of ${pageCount}`,
        this.pageWidth / 2,
        this.pageHeight - 10,
        { align: 'center' }
      );
      this.doc.text(
        'Generated by Cheetah Payroll System',
        this.pageWidth - this.margin,
        this.pageHeight - 10,
        { align: 'right' }
      );
    }
  }

  // Generate PAYE Return PDF
  generatePayeReturn(data: PayeReturnData[], totalPaye: number, totalGross: number, period: string): Blob {
    const startY = this.addHeader('PAYE Tax Return', period);

    // Summary section
    this.doc.setFontSize(12);
    this.doc.setFont('helvetica', 'bold');
    this.doc.text('Summary', this.margin, startY + 10);

    const summaryData = [
      ['Total Gross Pay', `RWF ${totalGross.toLocaleString()}`],
      ['Total PAYE Tax', `RWF ${totalPaye.toLocaleString()}`],
      ['Number of Employees', data.length.toString()],
      ['Effective Tax Rate', `${((totalPaye / totalGross) * 100).toFixed(2)}%`]
    ];

    this.doc.autoTable({
      startY: startY + 15,
      head: [['Description', 'Amount']],
      body: summaryData,
      theme: 'grid',
      headStyles: { fillColor: [25, 118, 210] },
      margin: { left: this.margin, right: this.margin },
    });

    // Detailed breakdown
    this.doc.setFontSize(12);
    this.doc.setFont('helvetica', 'bold');
    const previousTableY = (this.doc as any).autoTable?.previous?.finalY ?? (startY + 15);
    this.doc.text('Employee Breakdown', this.margin, previousTableY + 20);

    const tableData = data.map(item => [
      item.staffId,
      item.staffName,
      `RWF ${item.grossPay.toLocaleString()}`,
      `RWF ${item.payeTax.toLocaleString()}`,
      `RWF ${item.netPay.toLocaleString()}`
    ]);

    this.doc.autoTable({
      startY: previousTableY + 25,
      head: [['Employee ID', 'Name', 'Gross Pay', 'PAYE Tax', 'Net Pay']],
      body: tableData,
      theme: 'striped',
      headStyles: { fillColor: [25, 118, 210] },
      margin: { left: this.margin, right: this.margin },
      columnStyles: {
        2: { halign: 'right' },
        3: { halign: 'right' },
        4: { halign: 'right' }
      }
    });

    this.addFooter();
    return this.doc.output('blob');
  }

  // Generate Pension Report PDF
  generatePensionReport(
    data: PensionReportData[], 
    totalEmployee: number, 
    totalEmployer: number, 
    grandTotal: number, 
    period: string
  ): Blob {
    const startY = this.addHeader('Pension Contribution Report', period);

    // Summary section
    this.doc.setFontSize(12);
    this.doc.setFont('helvetica', 'bold');
    this.doc.text('Summary', this.margin, startY + 10);

    const summaryData = [
      ['Employee Contributions (6%)', `RWF ${totalEmployee.toLocaleString()}`],
      ['Employer Contributions (8%)', `RWF ${totalEmployer.toLocaleString()}`],
      ['Total Contributions', `RWF ${grandTotal.toLocaleString()}`],
      ['Number of Employees', data.length.toString()]
    ];

    this.doc.autoTable({
      startY: startY + 15,
      head: [['Description', 'Amount']],
      body: summaryData,
      theme: 'grid',
      headStyles: { fillColor: [76, 175, 80] },
      margin: { left: this.margin, right: this.margin },
    });
    const summaryTable = (this.doc as any).lastAutoTable || {};

    // Detailed breakdown
    this.doc.setFontSize(12);
    this.doc.setFont('helvetica', 'bold');
    this.doc.text('Employee Breakdown', this.margin, (summaryTable.finalY ?? startY) + 20);

    const tableData = data.map(item => [
      item.staffId,
      item.staffName,
      `RWF ${item.grossPay.toLocaleString()}`,
      `RWF ${item.employeeContribution.toLocaleString()}`,
      `RWF ${item.employerContribution.toLocaleString()}`,
      `RWF ${item.totalContribution.toLocaleString()}`
    ]);

    this.doc.autoTable({
    startY: (summaryTable.finalY ?? startY) + 25,
      head: [['Employee ID', 'Name', 'Gross Pay', 'Employee (6%)', 'Employer (8%)', 'Total']],
      body: tableData,
      theme: 'striped',
      headStyles: { fillColor: [76, 175, 80] },
      margin: { left: this.margin, right: this.margin },
      columnStyles: {
        2: { halign: 'right' },
        3: { halign: 'right' },
        4: { halign: 'right' },
        5: { halign: 'right' }
      }
    });

    this.addFooter();
    return this.doc.output('blob');
  }

  // Generate Individual Payslip
  generatePayslip(staffPayroll: StaffPayroll, company: Company, period: string): Blob {
    this.doc = new jsPDF(); // Reset for individual payslip
    
    // Header with company branding
    this.doc.setFillColor(25, 118, 210);
    this.doc.rect(0, 0, this.pageWidth, 40, 'F');
    
    this.doc.setTextColor(255, 255, 255);
    this.doc.setFontSize(20);
    this.doc.setFont('helvetica', 'bold');
    this.doc.text('PAYSLIP', this.pageWidth / 2, 20, { align: 'center' });
    
    this.doc.setFontSize(12);
    this.doc.text(company.name, this.pageWidth / 2, 30, { align: 'center' });

    // Employee and period information
    this.doc.setTextColor(0, 0, 0);
    let y = 60;
    
    this.doc.setFontSize(14);
    this.doc.setFont('helvetica', 'bold');
    this.doc.text('Employee Information', this.margin, y);
    
    y += 10;
    this.doc.setFontSize(11);
    this.doc.setFont('helvetica', 'normal');
    this.doc.text(`Name: ${staffPayroll.staffName}`, this.margin, y);
    this.doc.text(`Period: ${period}`, this.pageWidth - this.margin, y, { align: 'right' });
    
    y += 8;
    this.doc.text(`Employee ID: ${staffPayroll.staffId}`, this.margin, y);
    this.doc.text(`Date: ${new Date().toLocaleDateString()}`, this.pageWidth - this.margin, y, { align: 'right' });

    // Earnings section
    y += 20;
    this.doc.setFontSize(12);
    this.doc.setFont('helvetica', 'bold');
    this.doc.text('Earnings', this.margin, y);

    const earningsData = [
      ['Basic Pay', `RWF ${staffPayroll.calculations.basicPay.toLocaleString()}`],
      ['Transport Allowance', `RWF ${staffPayroll.calculations.transportAllowance.toLocaleString()}`],
      ['Other Allowances', `RWF ${staffPayroll.calculations.otherAllowances.toLocaleString()}`],
      ['', ''],
      ['GROSS PAY', `RWF ${staffPayroll.calculations.grossPay.toLocaleString()}`]
    ];

    this.doc.autoTable({
      startY: y + 5,
      body: earningsData,
      theme: 'plain',
      columnStyles: {
        0: { fontStyle: 'normal', cellWidth: 100 },
        1: { halign: 'right', fontStyle: 'normal', cellWidth: 80 }
      },
      margin: { left: this.margin, right: this.pageWidth / 2 + 10 },
      didParseCell: (data: any) => {
        if (data.row.index === 4) { // GROSS PAY row
          data.cell.styles.fontStyle = 'bold';
          data.cell.styles.fillColor = [240, 240, 240];
        }
      }
    });

    // Deductions section
    this.doc.setFontSize(12);
    this.doc.setFont('helvetica', 'bold');
    this.doc.text('Deductions', this.pageWidth / 2 + 10, y);

    const deductionsData = [
      ['PAYE Tax', `RWF ${staffPayroll.calculations.payeBeforeReliefs.toLocaleString()}`],
      ['Pension (6%)', `RWF ${staffPayroll.calculations.pensionEmployee.toLocaleString()}`],
      ['Maternity (0.3%)', `RWF ${staffPayroll.calculations.maternityEmployee.toLocaleString()}`],
      ['RAMA (7.5%)', `RWF ${staffPayroll.calculations.ramaEmployee.toLocaleString()}`],
      ['CBHI (0.5%)', `RWF ${staffPayroll.calculations.cbhiEmployee.toLocaleString()}`],
      ['Other Deductions', `RWF ${staffPayroll.calculations.otherDeductions.toLocaleString()}`],
      ['', ''],
      ['TOTAL DEDUCTIONS', `RWF ${(
        staffPayroll.calculations.payeBeforeReliefs +
        staffPayroll.calculations.pensionEmployee +
        staffPayroll.calculations.maternityEmployee +
        staffPayroll.calculations.ramaEmployee +
        staffPayroll.calculations.cbhiEmployee +
        staffPayroll.calculations.otherDeductions
      ).toLocaleString()}`]
    ];

    this.doc.autoTable({
      startY: y + 5,
      body: deductionsData,
      theme: 'plain',
      columnStyles: {
        0: { fontStyle: 'normal', cellWidth: 100 },
        1: { halign: 'right', fontStyle: 'normal', cellWidth: 80 }
      },
      margin: { left: this.pageWidth / 2 + 10, right: this.margin },
      didParseCell: (data: any) => {
        if (data.row.index === 7) { // TOTAL DEDUCTIONS row
          data.cell.styles.fontStyle = 'bold';
          data.cell.styles.fillColor = [240, 240, 240];
        }
      }
    });

    // Net Pay section
    const lastTable = (this.doc as any).lastAutoTable || {};
    const netPayY = Math.max(lastTable.finalY ?? 0, y + 120) + 20;
    
    this.doc.setFillColor(25, 118, 210);
    this.doc.rect(this.margin, netPayY, this.pageWidth - (2 * this.margin), 20, 'F');
    
    this.doc.setTextColor(255, 255, 255);
    this.doc.setFontSize(16);
    this.doc.setFont('helvetica', 'bold');
    this.doc.text('NET PAY', this.margin + 10, netPayY + 13);
    this.doc.text(
      `RWF ${staffPayroll.calculations.finalNetPay.toLocaleString()}`,
      this.pageWidth - this.margin - 10,
      netPayY + 13,
      { align: 'right' }
    );

    // Footer
    this.doc.setTextColor(128, 128, 128);
    this.doc.setFontSize(8);
    this.doc.text(
      'This is a computer-generated payslip and does not require a signature.',
      this.pageWidth / 2,
      this.pageHeight - 20,
      { align: 'center' }
    );

    return this.doc.output('blob');
  }

  // Generate Bulk Payslips
  generateBulkPayslips(staffPayrolls: StaffPayroll[], company: Company, period: string): Blob {
    this.doc = new jsPDF();
    let isFirstPage = true;

    staffPayrolls.forEach((staffPayroll, index) => {
      if (!isFirstPage) {
        this.doc.addPage();
      }
      isFirstPage = false;

      // Generate individual payslip content (simplified version for bulk)
      this.doc.setFillColor(25, 118, 210);
      this.doc.rect(0, 0, this.pageWidth, 30, 'F');
      
      this.doc.setTextColor(255, 255, 255);
      this.doc.setFontSize(16);
      this.doc.setFont('helvetica', 'bold');
      this.doc.text('PAYSLIP', this.pageWidth / 2, 15, { align: 'center' });
      this.doc.text(company.name, this.pageWidth / 2, 25, { align: 'center' });

      // Employee info
      this.doc.setTextColor(0, 0, 0);
      this.doc.setFontSize(12);
      this.doc.text(`${staffPayroll.staffName} (${staffPayroll.staffId})`, this.margin, 50);
      this.doc.text(`Period: ${period}`, this.pageWidth - this.margin, 50, { align: 'right' });

      // Summary table
      const summaryData = [
        ['Gross Pay', `RWF ${staffPayroll.calculations.grossPay.toLocaleString()}`],
        ['Total Deductions', `RWF ${(
          staffPayroll.calculations.payeBeforeReliefs +
          staffPayroll.calculations.pensionEmployee +
          staffPayroll.calculations.maternityEmployee +
          staffPayroll.calculations.ramaEmployee +
          staffPayroll.calculations.cbhiEmployee +
          staffPayroll.calculations.otherDeductions
        ).toLocaleString()}`],
        ['Net Pay', `RWF ${staffPayroll.calculations.finalNetPay.toLocaleString()}`]
      ];

      this.doc.autoTable({
        startY: 60,
        head: [['Description', 'Amount']],
        body: summaryData,
        theme: 'striped',
        headStyles: { fillColor: [25, 118, 210] },
        margin: { left: this.margin, right: this.margin },
        columnStyles: {
          1: { halign: 'right' }
        }
      });
    });

    this.addFooter();
    return this.doc.output('blob');
  }

  // Utility method to download blob
  static downloadBlob(blob: Blob, filename: string) {
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  }
}